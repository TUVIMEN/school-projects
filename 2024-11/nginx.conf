
#user http;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  /var/log/nginx-error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
    use epoll;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx-access.log  main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    client_header_timeout 10m;
    client_body_timeout 10m;
    send_timeout 10m;

    connection_pool_size 256;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 2k;
    request_pool_size 4k;

    #keepalive_timeout  0;
    keepalive_timeout 75 20;

    gzip  on;

    output_buffers 1 32k;
    postpone_output 1460;

    ignore_invalid_headers on;

    index index.html;

    server {
	listen 80 default_server;
	listen [::]:80 default_server;

	root /var/sites/moto;

	index index.php index.html index.htm;

	server_name localhost;
	rewrite ^/api/(.*)$ /api.php last;
	rewrite ^/([^.]+)$ /index.html last;


	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}	

	#error_page 404 /;	
	# pass PHP scripts to FastCGI server
	#
	location ~ \.php$ {
		# With php-fpm (or other unix sockets):
		#fastcgi_pass unix:/run/php-fpm/php-fpm.sock;
		# With php-cgi (or other tcp sockets):
		fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock;
		fastcgi_intercept_errors on;
		fastcgi_split_path_info ^(.+\.php)(/.+)$;
		include fastcgi.conf;
	}
	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	location ~ /\.ht {
		deny all;
	}
    }

    include /etc/nginx/sites-enabled/*;

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
